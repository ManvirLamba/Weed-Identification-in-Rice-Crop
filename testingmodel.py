# -*- coding: utf-8 -*-
"""TestingModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MaJu_1NLODqF82zS9lkPl3r_CywsGxMV
"""

import numpy as np
import cv2 as cv
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow # for image display
import os
from google.colab import files

from google.colab import drive
drive.mount('/content/drive')

for m in range(41):
  m=m+1
  sub_folder='/content/drive/MyDrive/MLIP/MLIPProject/Data/'
  filename = str(m)+".jpg"
  image_path= os.path.join(sub_folder,filename)
  img = cv.imread(image_path)# read images
  print(image_path)
  #cv2_imshow(img)
  Z = img.reshape((-1,3))
  Z = np.float32(Z)
  # Using clustering seperating different elements visible in the image and colors assigned as per that using KMeans
  # Select k=5
  plt.rcParams["figure.figsize"] = (12,50) # Change figure size in plot
  fig, ax = plt.subplots(1,2, sharey=True) # Define subplots

  criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 3, 1.0) # stop the iteration when max iteration or specified accuracy/epsilon, is reached.
  attempts=2 #  Flag to specify the number of times the algorithm is executed using different initial labellings. The algorithm returns the labels that yield the best compactness. This compactness is returned as output.
  flag = cv.KMEANS_RANDOM_CENTERS # This flag is used to specify how initial centers are taken
  i= 0
  K = 4
  # apply K-means algorithm
  ret,label,center=cv.kmeans(Z,K,None,criteria,attempts,flag)
  # Now convert back into uint8, and make original image
  center = np.uint8(center)
  res = center[label.flatten()]
  res2 = res.reshape((img.shape))
  # plot the original image and K-means image
  ax[1].imshow(res2[:,:,0],cmap='CMRmap')
  ax[1].set_title('K = %s Image'%K)
  ax[0].imshow(img)
  ax[0].set_title('Original Image')
  path = str(m)+".jpg"
  plt.savefig(path)
  files.download(path)

# Using clustering seperating different elements visible in the image and colors assigned as per that using KMeans
# Select k=5
plt.rcParams["figure.figsize"] = (12,50) # Change figure size in plot
fig, ax = plt.subplots(1,2, sharey=True) # Define subplots

criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 3, 1.0) # stop the iteration when max iteration or specified accuracy/epsilon, is reached.
attempts=2 #  Flag to specify the number of times the algorithm is executed using different initial labellings. The algorithm returns the labels that yield the best compactness. This compactness is returned as output.
flag = cv.KMEANS_RANDOM_CENTERS # This flag is used to specify how initial centers are taken
i= 0
K = 4
# apply K-means algorithm
ret,label,center=cv.kmeans(Z,K,None,criteria,attempts,flag)
# Now convert back into uint8, and make original image
center = np.uint8(center)
res = center[label.flatten()]
res2 = res.reshape((img.shape))
# plot the original image and K-means image
ax[1].imshow(res2[:,:,0],cmap='CMRmap')
ax[1].set_title('K = %s Image'%K)
ax[0].imshow(img)
ax[0].set_title('Original Image')
path = str(m)+".jpg"
plt.savefig(path)
files.download(path)

  # Different colors that can be used--->>
#--->> 'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocea...